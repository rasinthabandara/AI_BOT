const _0x28338a = _0x2fbd; (function (_0x2ebd55, _0x28462c) { const _0x355105 = _0x2fbd, _0x55894a = _0x2ebd55(); while (!![]) { try { const _0x5a5f22 = parseInt(_0x355105(0x219)) / 0x1 * (parseInt(_0x355105(0x1ff)) / 0x2) + parseInt(_0x355105(0x214)) / 0x3 + parseInt(_0x355105(0x244)) / 0x4 * (parseInt(_0x355105(0x232)) / 0x5) + parseInt(_0x355105(0x202)) / 0x6 + parseInt(_0x355105(0x1f0)) / 0x7 + parseInt(_0x355105(0x1de)) / 0x8 + -parseInt(_0x355105(0x1e5)) / 0x9; if (_0x5a5f22 === _0x28462c) break; else _0x55894a['push'](_0x55894a['shift']()); } catch (_0x1f19c1) { _0x55894a['push'](_0x55894a['shift']()); } } }(_0x3c7e, 0xbb4f3)); function _0x3c7e() { const _0x164aad = ['&price=$', 'free', '50078CIJDZz', 'status', 'Waiting\x20for\x20new\x20message...', '8616912UICdgW', 'message', 'Telegram\x20API\x20not\x20found', 'plan_auto_update', '/img', 'plan_expire', 'filter', 'SELECT\x20*\x20FROM\x20web', 'Free\x20fb\x20user\x20but\x20remider\x20did\x20not\x20send\x20as\x20was\x20off', 'msg\x20sent\x20to\x20the\x20existing\x20fb\x20user\x20for\x20plan:\x20', 'command', 'msg', '/plans', '/user/checkout?id=', 'price', 'startsWith', 'length', 'left_limit', '4507449QVFBTS', 'bot\x20was\x20closed', '/facebook', './convo/function', 'WEBHOOK_VERIFIED', '47YbrpgP', 'hostname', 'web_url', 'json', 'Bot\x20was\x20started', 'plan\x20updated\x20for\x20existing\x20fb\x20user', 'complete_task', 'parse', 'fb\x20msg\x20in', 'node-fetch', '&name=', 'msg\x20sent\x20to\x20the\x20fb\x20user\x20for\x20plan:\x20', 'facebook_api', 'hub.challenge', 'buy', 'get', 'yes', '\x20\x0a\x0a\x0a', '://', 'user\x20does\x20not\x20have\x20a\x20plan\x20warding\x20sent\x20already', 'ad_msg', 'facebook', 'query', 'rem_n_msg', 'premium\x20user\x20msg\x20sent', '1465RePQSM', 'chat', 'telegram', 'Body', 'full', 'body', 'msg\x20sent\x20to\x20the\x20existing\x20tele\x20user\x20for\x20plan:\x20', 'whatsapp:', 'result', '&plan_limit=', 'plan', '&mobile=', 'sendStatus', 'telegram_api', 'msg\x20sent\x20to\x20the\x20existing\x20user\x20for\x20plan:\x20', 'remind_ad_msg', 'trim', 'free\x20user\x20msg\x20sent', '18164XnBtmq', 'exports', 'avail_plan', 'Router', 'buy_plan', 'dalle', '/img\x20', 'submit\x20ad\x20first\x20free\x20tele\x20user', 'hub.mode', 'messaging', '/hit', 'entry', 'log', 'facebook_page_id', 'message_balance', 'replace', '2620512MJNJzW', 'user\x20telegram\x20not\x20found\x20numer\x20is:\x20', '/watch?code=', 'name', 'update_id', 'post', 'UPDATE\x20web\x20SET\x20telegram_status\x20=\x20?', '56000331uXNUcj', 'telegram_status', 'JWTKEY', 'Free\x20tele\x20user\x20but\x20remider\x20did\x20not\x20send\x20as\x20was\x20off', 'facebook_status', 'submit\x20ad\x20first\x20free\x20user', 'subscribe', 'forEach', '___________\x0a\x0a', 'text', 'then', '8511531KyDpKQ', 'msg\x20sent\x20to\x20the\x20user\x20for\x20plan:\x20', 'protocol', 'plan\x20updated\x20for\x20existing\x20user', 'stopPolling', 'send', 'WaId', 'getUpdates?offset=', 'sendText', 'toLowerCase', 'plan_limit', 'des', 'paid\x20iser']; _0x3c7e = function () { return _0x164aad; }; return _0x3c7e(); } function _0x2fbd(_0x2ebad, _0x3bdaeb) { const _0x3c7ed0 = _0x3c7e(); return _0x2fbd = function (_0x2fbde0, _0x3fcfbf) { _0x2fbde0 = _0x2fbde0 - 0x1cf; let _0x22bca4 = _0x3c7ed0[_0x2fbde0]; return _0x22bca4; }, _0x2fbd(_0x2ebad, _0x3bdaeb); } const router = require('express')[_0x28338a(0x1d1)](), promisesql = require('../function/promisesql'), bcrypt = require('bcrypt'), express = require('express'), { isvalid } = require('../middlewares/user'), { sendText, openAi, getUser, readJsonFile2, sendMessageTelegram, sendPhotoTelegram, getFreePlan, sendFbMessageButton, sendFbMessageImg, sendMedia, sendFbMessage, openAiImage, getAllPlans, updatePlan, addUser, getPendingAd, checkIfPendingAd, descreaseLimit, getAllCommands } = require(_0x28338a(0x217)), fetch = require(_0x28338a(0x222)); function startsWithPlan(_0x94f19a) { const _0x267dc7 = _0x28338a, _0x53c3b2 = _0x267dc7(0x20e); return _0x94f19a[_0x267dc7(0x242)]()[_0x267dc7(0x1f9)]()[_0x267dc7(0x211)](_0x53c3b2); } router['use'](express['urlencoded']()), router[_0x28338a(0x1e3)](_0x28338a(0x1d8), async (_0x4a0c16, _0x576a32) => { const _0x3db208 = _0x28338a; try { const _0x25562c = await promisesql['query'](_0x3db208(0x209), []), _0x26cfc7 = _0x25562c[0x0][_0x3db208(0x1dc)]; if (parseInt(_0x26cfc7) < 0x2) return; const _0x4a1893 = _0x4a0c16[_0x3db208(0x237)]; function _0x495ce2(_0x239400) { const _0x3b1dfd = _0x3db208, _0xed8aa1 = _0x3b1dfd(0x206); return _0x239400['trim']()[_0x3b1dfd(0x1f9)]()['startsWith'](_0xed8aa1); } const _0x39267d = await readJsonFile2('msg'); function _0x1e0188(_0xac3527) { const _0x457902 = _0x3db208; let _0x1c35b5 = _0x39267d[_0x457902(0x1d0)] + '\x0a\x0a'; return _0xac3527[_0x457902(0x1ec)](_0x281a92 => { const _0x525275 = _0x457902; _0x1c35b5 += '*' + _0x281a92[_0x525275(0x1e1)] + '*\x0a', _0x1c35b5 += _0x39267d[_0x525275(0x1fa)] + '\x20' + _0x281a92[_0x525275(0x1fa)] + '\x0a', _0x1c35b5 += _0x39267d[_0x525275(0x210)] + '\x20' + (_0x281a92[_0x525275(0x210)] === 0x0 ? _0x39267d[_0x525275(0x1fe)] : '$' + _0x281a92['price']) + '\x0a', _0x1c35b5 += _0x39267d['des'] + '\x20' + _0x281a92['des'] + '\x0a', _0x1c35b5 += _0x39267d['ad'] + '\x20' + (_0x281a92['ad'] === 0x1 ? _0x39267d[_0x525275(0x229)] : _0x39267d['no']) + '\x0a', _0x1c35b5 += _0x39267d[_0x525275(0x1d3)] + '\x20' + (_0x281a92[_0x525275(0x1d3)] === 0x1 ? _0x39267d[_0x525275(0x229)] : _0x39267d['no']) + '\x0a', _0x1c35b5 += _0x39267d[_0x525275(0x230)] + '\x20' + (_0x281a92[_0x525275(0x241)] === 0x1 ? _0x39267d[_0x525275(0x229)] : _0x39267d['no']) + '\x0a', _0x1c35b5 += _0x39267d[_0x525275(0x227)] + '\x20' + _0x4a0c16['protocol'] + '://' + _0x4a0c16[_0x525275(0x21a)] + _0x525275(0x20f) + _0x281a92['id'] + _0x525275(0x223) + _0x281a92[_0x525275(0x1e1)] + _0x525275(0x23b) + _0x281a92['plan_limit'] + _0x525275(0x1fd) + _0x281a92['price'] + _0x525275(0x23d) + _0x4a1893[_0x525275(0x1f6)] + '\x0a\x0a'; }), _0x1c35b5; } if (_0x4a1893['Body']) { const _0x472a13 = await getUser(_0x4a1893[_0x3db208(0x1f6)]); _0x4a1893['body'] = _0x4a1893[_0x3db208(0x235)]; if (!_0x472a13) { await addUser(_0x4a1893[_0x3db208(0x1f6)], 'whatsapp'), console[_0x3db208(0x1da)]('user\x20not\x20found\x20numer\x20is:\x20' + _0x4a1893[_0x3db208(0x1f6)]); const _0x4fd238 = await getFreePlan(); console[_0x3db208(0x1da)]({ 'freePlan': _0x4fd238 }); const _0x4c21ae = await getAllPlans(); !_0x4fd238 ? (await sendText(_0x39267d[_0x3db208(0x1d2)] + _0x3db208(0x1ed) + _0x1e0188(_0x4c21ae), 'whatsapp:' + _0x4a1893[_0x3db208(0x1f6)]), console['log'](_0x3db208(0x1f1) + _0x4a1893[_0x3db208(0x1f6)])) : (await updatePlan(_0x4a1893[_0x3db208(0x1f6)], _0x4fd238), console[_0x3db208(0x1da)](_0x4a1893), await sendText(_0x39267d[_0x3db208(0x205)], _0x3db208(0x239) + _0x4a1893['WaId'])); } else { if (parseInt(_0x472a13[_0x3db208(0x213)]) < 0x2) { const _0x7d0bc7 = await getFreePlan(), _0xcf1d9a = await getAllPlans(); !_0x7d0bc7 ? (await sendText(_0x39267d['plan_expire'] + '___________\x0a\x0a' + _0x1e0188(_0xcf1d9a), 'whatsapp:' + _0x4a1893[_0x3db208(0x1f6)]), console['log'](_0x3db208(0x240) + _0x4a1893[_0x3db208(0x1f6)])) : (await updatePlan(_0x4a1893[_0x3db208(0x1f6)], _0x7d0bc7), console['log'](_0x3db208(0x1f3)), await sendText(_0x39267d[_0x3db208(0x205)] + '\x0a\x0a' + _0x1e0188(_0xcf1d9a), _0x3db208(0x239) + _0x4a1893[_0x3db208(0x1f6)])); } else { const _0x582c17 = await getAllPlans(), _0x2f0df1 = JSON['parse'](_0x472a13[_0x3db208(0x23c)])?.['ad'] === 0x1 ? !![] : ![]; if (_0x2f0df1) { const _0x1a94ad = await checkIfPendingAd(_0x4a1893[_0x3db208(0x1f6)]); if (_0x1a94ad) { JSON[_0x3db208(0x220)](_0x472a13['plan'])?.[_0x3db208(0x241)] === 0x1 && (await sendText(_0x39267d[_0x3db208(0x21f)] + '\x20' + _0x4a0c16['protocol'] + '://' + _0x4a0c16[_0x3db208(0x21a)] + '/watch?code=' + _0x1a94ad['id'] + '\x20\x0a\x0a\x0a' + _0x1e0188(_0x582c17), _0x3db208(0x239) + _0x4a1893[_0x3db208(0x1f6)]), descreaseLimit(_0x4a1893[_0x3db208(0x1f6)], _0x26cfc7), console[_0x3db208(0x1da)](_0x3db208(0x1ea))); console[_0x3db208(0x1da)]('Free\x20user\x20but\x20remider\x20did\x20not\x20send\x20as\x20was\x20off', _0x4a1893[_0x3db208(0x1f6)]); return; } else { const _0x254efa = await getPendingAd({ 'mobile': _0x4a1893[_0x3db208(0x1f6)], 'premium': ![] }), _0x2a7400 = await getAllCommands(), _0x3661f7 = _0x2a7400[_0x3db208(0x208)](_0x28a1f9 => _0x28a1f9[_0x3db208(0x20c)] === _0x4a1893[_0x3db208(0x235)]); if (_0x495ce2(_0x4a1893[_0x3db208(0x235)]) && JSON[_0x3db208(0x220)](_0x472a13[_0x3db208(0x23c)])?.[_0x3db208(0x1d3)] === 0x1) { const _0x1612ae = await openAiImage(_0x4a1893[_0x3db208(0x235)]['replace']('/img\x20', '')); await sendMedia('\x0a\x0a' + _0x39267d[_0x3db208(0x22d)] + '\x20' + _0x4a0c16[_0x3db208(0x1f2)] + _0x3db208(0x22b) + _0x4a0c16[_0x3db208(0x21a)] + _0x3db208(0x1e0) + _0x254efa['id'], _0x1612ae, 'whatsapp:' + _0x4a1893[_0x3db208(0x1f6)]); } else { if (_0x3661f7[_0x3db208(0x212)] > 0x0) await bot[_0x3db208(0x1f8)](_0x3661f7[0x0][_0x3db208(0x203)], _0x3db208(0x239) + _0x4a1893[_0x3db208(0x1f6)]); else { if (startsWithPlan(_0x4a1893['Body'])) await bot[_0x3db208(0x1f8)](_0x1e0188(_0x582c17), _0x3db208(0x239) + _0x4a1893[_0x3db208(0x1f6)]); else { const _0xe19503 = await openAi(_0x4a1893['body'], _0x4a1893['WaId']); await sendText(_0xe19503 + ('\x0a\x0a' + _0x39267d[_0x3db208(0x22d)] + '\x20' + _0x4a0c16[_0x3db208(0x1f2)] + _0x3db208(0x22b) + _0x4a0c16[_0x3db208(0x21a)] + _0x3db208(0x1e0) + _0x254efa['id']), _0x3db208(0x239) + _0x4a1893[_0x3db208(0x1f6)]), console['log'](_0xe19503 + '\x0a\x0a' + _0x39267d[_0x3db208(0x22d)] + '\x20' + _0x4a0c16[_0x3db208(0x1f2)] + '://' + _0x4a0c16[_0x3db208(0x21a)] + _0x3db208(0x1e0) + _0x254efa['id']); } } } await descreaseLimit(_0x4a1893[_0x3db208(0x1f6)], _0x26cfc7), console[_0x3db208(0x1da)](_0x3db208(0x243)); } } else { if (!_0x472a13[_0x3db208(0x23c)] || _0x472a13[_0x3db208(0x213)] < 0x1) { const _0x4d58ae = await getFreePlan(); _0x4d58ae && (await updatePlan(chatId, _0x4d58ae), console[_0x3db208(0x1da)](_0x3db208(0x21e)), bot[_0x3db208(0x1f8)](_0x39267d['plan_auto_update'] + '\x0a\x0a' + _0x1e0188(_0x582c17), 'whatsapp:' + _0x4a1893['WaId'])); console[_0x3db208(0x1da)]('user\x20does\x20not\x20have\x20a\x20plan\x20warding\x20sent\x20already'); return; } await getPendingAd({ 'mobile': _0x4a1893[_0x3db208(0x1f6)], 'premium': !![] }); if (_0x495ce2(_0x4a1893['Body']) && JSON[_0x3db208(0x220)](_0x472a13[_0x3db208(0x23c)])?.[_0x3db208(0x1d3)] === 0x1) { const _0x1c633a = await openAiImage(_0x4a1893[_0x3db208(0x235)][_0x3db208(0x1dd)](_0x3db208(0x1d4), '')); await sendMedia('-', _0x1c633a, 'whatsapp:' + _0x4a1893['WaId']); } else { if (ifYes['length'] > 0x0) await bot['sendText'](ifYes[0x0]['message'], _0x3db208(0x239) + _0x4a1893['WaId']); else { if (startsWithPlan(_0x4a1893['Body'])) await bot[_0x3db208(0x1f8)](_0x1e0188(_0x582c17), _0x3db208(0x239) + _0x4a1893[_0x3db208(0x1f6)]); else { const _0x359106 = await openAi(_0x4a1893[_0x3db208(0x237)], _0x4a1893[_0x3db208(0x1f6)]); await sendText(_0x359106, _0x3db208(0x239) + _0x4a1893[_0x3db208(0x1f6)]); } } } await descreaseLimit(_0x4a1893[_0x3db208(0x1f6)], _0x26cfc7), console['log'](_0x3db208(0x231)); } } } } } catch (_0x5be0ca) { console['log'](_0x5be0ca); } }), router[_0x28338a(0x228)]('/run_telegram_bot', isvalid, async (_0x2f55ea, _0x333631) => { const _0x220d74 = _0x28338a; try { const _0xa1bdf4 = await promisesql[_0x220d74(0x22f)]('SELECT\x20*\x20FROM\x20api', []), _0x384b5b = _0xa1bdf4[0x0][_0x220d74(0x23f)]; if (!_0x384b5b) return _0x333631[_0x220d74(0x21c)]({ 'msg': _0x220d74(0x204) }); if (parseInt(_0x2f55ea['query'][_0x220d74(0x1e6)]) !== 0x1) { _0x333631[_0x220d74(0x21c)]({ 'msg': _0x220d74(0x215), 'success': !![] }), await promisesql[_0x220d74(0x22f)](_0x220d74(0x1e4), ['0']); return; } const _0x188f67 = 'https://api.telegram.org/bot' + _0x384b5b + '/'; let _0x16263d = 0x0; async function _0x339107() { const _0x55619c = _0x220d74, _0x3f9e35 = _0x188f67 + (_0x55619c(0x1f7) + _0x16263d), _0x3dbfd4 = await fetch(_0x3f9e35), _0x230bac = await _0x3dbfd4['json'](); if (_0x230bac[_0x55619c(0x23a)][_0x55619c(0x212)] > 0x0) { _0x16263d = _0x230bac['result'][0x0][_0x55619c(0x1e2)] + 0x1; const _0x409d33 = _0x230bac[_0x55619c(0x23a)][0x0]['message']; return console[_0x55619c(0x1da)]('New\x20message\x20received:', _0x409d33['text']), _0x409d33; } return new Promise(_0x146695 => setTimeout(_0x146695, 0x3e8))[_0x55619c(0x1ef)](() => _0x339107()); } await promisesql[_0x220d74(0x22f)](_0x220d74(0x1e4), [_0x2f55ea[_0x220d74(0x22f)][_0x220d74(0x1e6)]]), _0x333631[_0x220d74(0x21c)]({ 'msg': _0x220d74(0x21d), 'success': !![] }); async function _0x5275d7() { const _0x204114 = _0x220d74; console[_0x204114(0x1da)](_0x204114(0x201)); const _0x58d2b0 = await _0x339107(), _0x40a035 = await promisesql[_0x204114(0x22f)](_0x204114(0x209), []); if (parseInt(_0x40a035[0x0][_0x204114(0x1e6)]) !== 0x1) { bot[_0x204114(0x1f4)](); return; } const _0xcbb866 = _0x58d2b0[_0x204114(0x233)]['id'], _0x41170a = _0x58d2b0['text'], _0xfb83e1 = await getAllCommands(), _0x18220d = _0xfb83e1[_0x204114(0x208)](_0x12109e => _0x12109e[_0x204114(0x20c)] === _0x41170a); if (_0x18220d[_0x204114(0x212)] > 0x0) { await sendMessageTelegram(_0xcbb866, _0x18220d[0x0][_0x204114(0x203)], _0x384b5b); return; } function _0x3e26ae(_0x4cd132) { const _0x5a32ea = _0x204114, _0x3e0467 = _0x5a32ea(0x206); return _0x4cd132['trim']()[_0x5a32ea(0x1f9)]()['startsWith'](_0x3e0467); } const _0x1f9922 = await readJsonFile2(_0x204114(0x20d)); function _0x41f31f(_0x217b55) { const _0x1422ba = _0x204114; let _0xc86c2b = _0x1f9922[_0x1422ba(0x1d0)] + '\x0a\x0a'; return _0x217b55[_0x1422ba(0x1ec)](_0x52e03f => { const _0xd9cb01 = _0x1422ba; _0xc86c2b += '*' + _0x52e03f['name'] + '*\x0a', _0xc86c2b += _0x1f9922['plan_limit'] + '\x20' + _0x52e03f[_0xd9cb01(0x1fa)] + '\x0a', _0xc86c2b += _0x1f9922[_0xd9cb01(0x210)] + '\x20' + (_0x52e03f[_0xd9cb01(0x210)] === 0x0 ? _0x1f9922['free'] : '$' + _0x52e03f[_0xd9cb01(0x210)]) + '\x0a', _0xc86c2b += _0x1f9922[_0xd9cb01(0x1fb)] + '\x20' + _0x52e03f[_0xd9cb01(0x1fb)] + '\x0a', _0xc86c2b += _0x1f9922['ad'] + '\x20' + (_0x52e03f['ad'] === 0x1 ? _0x1f9922[_0xd9cb01(0x229)] : _0x1f9922['no']) + '\x0a', _0xc86c2b += _0x1f9922[_0xd9cb01(0x1d3)] + '\x20' + (_0x52e03f[_0xd9cb01(0x1d3)] === 0x1 ? _0x1f9922[_0xd9cb01(0x229)] : _0x1f9922['no']) + '\x0a', _0xc86c2b += _0x1f9922[_0xd9cb01(0x230)] + '\x20' + (_0x52e03f['remind_ad_msg'] === 0x1 ? _0x1f9922[_0xd9cb01(0x229)] : _0x1f9922['no']) + '\x0a', _0xc86c2b += _0x1f9922['buy'] + '\x20' + _0x2f55ea[_0xd9cb01(0x1f2)] + _0xd9cb01(0x22b) + _0x2f55ea[_0xd9cb01(0x21a)] + _0xd9cb01(0x20f) + _0x52e03f['id'] + _0xd9cb01(0x223) + _0x52e03f[_0xd9cb01(0x1e1)] + _0xd9cb01(0x23b) + _0x52e03f[_0xd9cb01(0x1fa)] + _0xd9cb01(0x1fd) + _0x52e03f[_0xd9cb01(0x210)] + _0xd9cb01(0x23d) + _0xcbb866 + '\x0a\x0a'; }), _0xc86c2b; } const _0x37ab5d = await getUser(_0xcbb866); if (!_0x37ab5d) { await addUser(_0xcbb866, _0x204114(0x234)), console['log']('user\x20telegram\x20not\x20found\x20numer\x20is:\x20' + _0xcbb866); const _0x271fbc = await getFreePlan(), _0x58fde9 = await getAllPlans(); !_0x271fbc ? (await sendMessageTelegram(_0xcbb866, _0x1f9922[_0x204114(0x1d2)] + '___________\x0a\x0a' + _0x41f31f(_0x58fde9), _0x384b5b), console[_0x204114(0x1da)]('msg\x20sent\x20to\x20the\x20telegram\x20user\x20for\x20plan:\x20' + _0xcbb866)) : (await updatePlan(_0xcbb866, _0x271fbc), await sendMessageTelegram(_0xcbb866, _0x1f9922[_0x204114(0x205)], _0x384b5b)); } else { if (parseInt(_0x37ab5d[_0x204114(0x213)]) < 0x2) { const _0x101e39 = await getFreePlan(); console[_0x204114(0x1da)]({ 'freePlan': _0x101e39 }); const _0x42f0f1 = await getAllPlans(); !_0x101e39 ? (await sendMessageTelegram(_0xcbb866, _0x1f9922[_0x204114(0x207)] + _0x204114(0x1ed) + _0x41f31f(_0x42f0f1), _0x384b5b), console[_0x204114(0x1da)](_0x204114(0x238) + _0xcbb866)) : (await updatePlan(_0xcbb866, _0x101e39), console['log']('plan\x20updated\x20for\x20existing\x20tele\x20user'), await sendMessageTelegram(_0xcbb866, _0x1f9922[_0x204114(0x205)] + '\x0a\x0a' + _0x41f31f(_0x42f0f1), _0x384b5b)); } else { const _0x5bedb5 = await getAllPlans(), _0x201e30 = JSON[_0x204114(0x220)](_0x37ab5d[_0x204114(0x23c)])?.['ad'] === 0x1 ? !![] : ![]; if (_0x201e30) { const _0x211616 = await checkIfPendingAd(_0xcbb866); if (_0x211616) { JSON[_0x204114(0x220)](_0x37ab5d[_0x204114(0x23c)])?.[_0x204114(0x241)] === 0x1 && (await sendMessageTelegram(_0xcbb866, _0x1f9922[_0x204114(0x21f)] + _0x204114(0x22a) + _0x41f31f(_0x5bedb5), _0x384b5b, [[{ 'text': _0x1f9922[_0x204114(0x22d)], 'url': _0x2f55ea['protocol'] + _0x204114(0x22b) + _0x2f55ea['hostname'] + '/watch?code=' + _0x211616['id'] }]]), descreaseLimit(_0xcbb866, 'telegram', { 'tele': !![] }), console['log'](_0x204114(0x1d5))); console['log'](_0x204114(0x1e8), _0xcbb866); return; } else { const _0x292c2a = await getPendingAd({ 'mobile': _0xcbb866, 'premium': ![] }); if (_0x3e26ae(_0x41170a) && JSON[_0x204114(0x220)](_0x37ab5d[_0x204114(0x23c)])?.[_0x204114(0x1d3)] === 0x1) { const _0x16dc07 = await openAiImage(_0x41170a[_0x204114(0x1dd)](_0x204114(0x1d4), '')); await sendPhotoTelegram(_0xcbb866, _0x16dc07, _0x384b5b, '\x0a\x0a' + _0x1f9922[_0x204114(0x22d)]); } else { if (startsWithPlan(_0x41170a)) await sendMessageTelegram(_0xcbb866, _0x41f31f(_0x5bedb5)); else { const _0x486d80 = await openAi(_0x41170a, _0xcbb866); await sendMessageTelegram(_0xcbb866, _0x486d80 + '\x0a\x0a', _0x384b5b, [[{ 'text': _0x1f9922[_0x204114(0x22d)], 'url': _0x2f55ea[_0x204114(0x1f2)] + _0x204114(0x22b) + _0x2f55ea[_0x204114(0x21a)] + '/watch?code=' + _0x292c2a['id'] }]]), console[_0x204114(0x1da)](_0x486d80 + '\x0a\x0a' + _0x1f9922[_0x204114(0x22d)] + '\x20' + _0x2f55ea[_0x204114(0x1f2)] + _0x204114(0x22b) + _0x2f55ea['hostname'] + '/watch?code=' + _0x292c2a['id']); } } descreaseLimit(_0xcbb866, _0x204114(0x234), { 'tele': !![] }), console[_0x204114(0x1da)](_0x204114(0x243)); } } else { if (!_0x37ab5d[_0x204114(0x23c)] || _0x37ab5d[_0x204114(0x213)] < 0x1) { const _0x1c56c8 = await getFreePlan(); _0x1c56c8 && (await updatePlan(_0xcbb866, _0x1c56c8), console[_0x204114(0x1da)]('plan\x20updated\x20for\x20existing\x20fb\x20user'), await sendMessageTelegram(_0xcbb866, _0x1f9922[_0x204114(0x205)] + '\x0a\x0a' + _0x41f31f(_0x5bedb5), _0x384b5b)); console[_0x204114(0x1da)](_0x204114(0x22c)); return; } console['log'](_0x204114(0x1fc)), await getPendingAd({ 'mobile': _0xcbb866, 'premium': !![] }); if (_0x3e26ae(_0x41170a) && JSON[_0x204114(0x220)](_0x37ab5d[_0x204114(0x23c)])?.[_0x204114(0x1d3)] === 0x1) { const _0x202b25 = await openAiImage(_0x41170a['replace'](_0x204114(0x1d4), '')); await sendPhotoTelegram(_0xcbb866, _0x202b25, _0x384b5b); } else { if (startsWithPlan(_0x41170a)) await sendMessageTelegram(_0xcbb866, _0x41f31f(_0x5bedb5), _0x384b5b); else { const _0x28894b = await openAi(_0x41170a, _0xcbb866); await sendMessageTelegram(_0xcbb866, _0x28894b, _0x384b5b); } } await descreaseLimit(_0xcbb866, _0x204114(0x234), { 'tele': !![] }), console[_0x204114(0x1da)]('premium\x20user\x20msg\x20sent'); } } } await _0x5275d7(); } _0x5275d7(); } catch (_0x4b63fd) { console['log'](_0x4b63fd), _0x333631[_0x220d74(0x21c)]({ 'err': _0x4b63fd, 'msg': 'server\x20error\x20or\x20telegram\x20bot\x20token\x20invalid' }); } }), router['get'](_0x28338a(0x216), async (_0x5b1fb4, _0x3789d3) => { const _0x56e49a = _0x28338a; try { console['log'](_0x5b1fb4[_0x56e49a(0x22f)]); let _0xa8565e = _0x5b1fb4[_0x56e49a(0x22f)][_0x56e49a(0x1d6)], _0x4914b7 = _0x5b1fb4[_0x56e49a(0x22f)]['hub.verify_token'], _0x1ec9e5 = _0x5b1fb4[_0x56e49a(0x22f)][_0x56e49a(0x226)]; _0xa8565e && _0x4914b7 && (_0xa8565e === _0x56e49a(0x1eb) && _0x4914b7 === process['env'][_0x56e49a(0x1e7)] ? (console[_0x56e49a(0x1da)](_0x56e49a(0x218)), _0x3789d3['status'](0xc8)[_0x56e49a(0x1f5)](_0x1ec9e5)) : _0x3789d3[_0x56e49a(0x23e)](0x193)); } catch (_0x250e0e) { _0x3789d3[_0x56e49a(0x21c)]({ 'err': _0x250e0e }), console[_0x56e49a(0x1da)](_0x250e0e); } }), router['post'](_0x28338a(0x216), async (_0x2b69ae, _0x35779d) => { const _0x2944a7 = _0x28338a; try { console['log'](_0x2944a7(0x221)); const _0x278f4 = await promisesql[_0x2944a7(0x22f)](_0x2944a7(0x209), []); if (parseInt(_0x278f4[0x0][_0x2944a7(0x1e9)]) !== 0x1) { _0x35779d['status'](0xc8)[_0x2944a7(0x1f5)]('OK'); return; } const _0x22653b = await promisesql[_0x2944a7(0x22f)]('SELECT\x20*\x20FROM\x20api', []); if (!_0x22653b[0x0][_0x2944a7(0x225)]) { _0x35779d[_0x2944a7(0x200)](0xc8)['send']('OK'), await promisesql[_0x2944a7(0x22f)]('UPDATE\x20web\x20SET\x20facebook_status\x20=\x20?', ['0']); return; } let _0x2311aa = _0x2b69ae[_0x2944a7(0x237)], _0x1e24c3 = _0x2311aa[_0x2944a7(0x1d9)][0x0][_0x2944a7(0x1d7)][0x0][_0x2944a7(0x203)][_0x2944a7(0x1ee)], _0x5e4075 = _0x2311aa[_0x2944a7(0x1d9)][0x0]['messaging'][0x0]['sender']['id']; _0x35779d['status'](0xc8)[_0x2944a7(0x1f5)]('OK'); function _0x4d9a9d(_0x4929a3) { const _0x112e5d = _0x2944a7, _0x149142 = '/img'; return _0x4929a3[_0x112e5d(0x242)]()['toLowerCase']()[_0x112e5d(0x211)](_0x149142); } const _0x4b9c98 = await readJsonFile2(_0x2944a7(0x20d)); function _0x214dd4(_0x2a55a4) { const _0x263ae3 = _0x2944a7; let _0x3e5916 = _0x4b9c98[_0x263ae3(0x1d0)] + '\x0a\x0a'; return _0x2a55a4[_0x263ae3(0x1ec)](_0x4bde7d => { const _0x17f917 = _0x263ae3; _0x3e5916 += '*' + _0x4bde7d['name'] + '*\x0a', _0x3e5916 += _0x4b9c98['plan_limit'] + '\x20' + _0x4bde7d['plan_limit'] + '\x0a', _0x3e5916 += _0x4b9c98[_0x17f917(0x210)] + '\x20' + (_0x4bde7d[_0x17f917(0x210)] === 0x0 ? _0x4b9c98[_0x17f917(0x1fe)] : '$' + _0x4bde7d[_0x17f917(0x210)]) + '\x0a', _0x3e5916 += _0x4b9c98[_0x17f917(0x1fb)] + '\x20' + _0x4bde7d[_0x17f917(0x1fb)] + '\x0a', _0x3e5916 += _0x4b9c98['ad'] + '\x20' + (_0x4bde7d['ad'] === 0x1 ? _0x4b9c98[_0x17f917(0x229)] : _0x4b9c98['no']) + '\x0a', _0x3e5916 += _0x4b9c98[_0x17f917(0x1d3)] + '\x20' + (_0x4bde7d['dalle'] === 0x1 ? _0x4b9c98[_0x17f917(0x229)] : _0x4b9c98['no']) + '\x0a', _0x3e5916 += _0x4b9c98['rem_n_msg'] + '\x20' + (_0x4bde7d[_0x17f917(0x241)] === 0x1 ? _0x4b9c98[_0x17f917(0x229)] : _0x4b9c98['no']) + '\x0a', _0x3e5916 += _0x4b9c98['buy'] + '\x20' + _0x2b69ae['protocol'] + _0x17f917(0x22b) + _0x2b69ae[_0x17f917(0x21a)] + _0x17f917(0x20f) + _0x4bde7d['id'] + _0x17f917(0x223) + _0x4bde7d['name'] + _0x17f917(0x23b) + _0x4bde7d[_0x17f917(0x1fa)] + _0x17f917(0x1fd) + _0x4bde7d[_0x17f917(0x210)] + _0x17f917(0x23d) + _0x5e4075 + '\x0a\x0a'; }), _0x3e5916; } const _0x3c4bd7 = await getUser(_0x5e4075); if (!_0x3c4bd7) { await addUser(_0x5e4075, _0x2944a7(0x22e)), console['log'](_0x2944a7(0x1df) + _0x5e4075); const _0x2547f2 = await getFreePlan(); console[_0x2944a7(0x1da)]({ 'freePlan': _0x2547f2 }); const _0x35cd38 = await getAllPlans(); !_0x2547f2 ? (await sendFbMessage(_0x5e4075, _0x4b9c98[_0x2944a7(0x1d2)] + '___________\x0a\x0a' + _0x214dd4(_0x35cd38), _0x22653b[0x0][_0x2944a7(0x225)], _0x22653b[0x0][_0x2944a7(0x1db)]), console['log'](_0x2944a7(0x224) + _0x5e4075)) : (await updatePlan(_0x5e4075, _0x2547f2), await sendFbMessage(_0x5e4075, _0x4b9c98[_0x2944a7(0x205)], _0x22653b[0x0][_0x2944a7(0x225)], _0x22653b[0x0][_0x2944a7(0x1db)])); } else { if (parseInt(_0x3c4bd7['left_limit']) < 0x2) { const _0x4474b6 = await getFreePlan(), _0x2de2f0 = await getAllPlans(); !_0x4474b6 ? (await sendFbMessage(_0x5e4075, _0x4b9c98[_0x2944a7(0x207)] + '___________\x0a\x0a' + _0x214dd4(_0x2de2f0), _0x22653b[0x0]['facebook_api'], _0x22653b[0x0]['facebook_page_id']), console[_0x2944a7(0x1da)](_0x2944a7(0x20b) + _0x5e4075)) : (await updatePlan(_0x5e4075, _0x4474b6), console[_0x2944a7(0x1da)](_0x2944a7(0x21e)), await sendFbMessage(_0x5e4075, _0x4b9c98[_0x2944a7(0x205)] + '\x0a\x0a' + _0x214dd4(_0x2de2f0), _0x22653b[0x0][_0x2944a7(0x225)], _0x22653b[0x0]['facebook_page_id'])); } else { const _0x875305 = await getAllPlans(), _0x859d38 = JSON['parse'](_0x3c4bd7[_0x2944a7(0x23c)])?.['ad'] === 0x1 ? !![] : ![]; if (_0x859d38) { const _0x5a87ce = await checkIfPendingAd(_0x5e4075); if (_0x5a87ce) { JSON[_0x2944a7(0x220)](_0x3c4bd7['plan'])?.[_0x2944a7(0x241)] === 0x1 && (await sendFbMessage(_0x5e4075, _0x4b9c98[_0x2944a7(0x21f)] + _0x2944a7(0x22a) + _0x214dd4(_0x875305), _0x22653b[0x0][_0x2944a7(0x225)], _0x22653b[0x0][_0x2944a7(0x1db)]), descreaseLimit(_0x5e4075, 'fb', { 'tele': !![] }), console['log'](_0x2944a7(0x1d5))); console['log'](_0x2944a7(0x20a), _0x5e4075); return; } else { const _0x10719c = await getPendingAd({ 'mobile': _0x5e4075, 'premium': ![] }); if (_0x4d9a9d(_0x1e24c3) && JSON['parse'](_0x3c4bd7[_0x2944a7(0x23c)])?.[_0x2944a7(0x1d3)] === 0x1) { const _0x1c703f = await openAiImage(_0x1e24c3[_0x2944a7(0x1dd)](_0x2944a7(0x1d4), '')); await sendFbMessageImg(_0x5e4075, _0x1c703f, _0x22653b[0x0][_0x2944a7(0x225)], _0x22653b[0x0][_0x2944a7(0x1db)]), (await sendFbMessageButton(_0x5e4075, '\x0a\x0a' + _0x4b9c98[_0x2944a7(0x22d)], [{ 'type': _0x2944a7(0x21b), 'title': _0x4b9c98['ad_msg'], 'url': _0x2b69ae[_0x2944a7(0x1f2)] + _0x2944a7(0x22b) + _0x2b69ae[_0x2944a7(0x21a)] + _0x2944a7(0x1e0) + _0x10719c['id'], 'webview_height_ratio': _0x2944a7(0x236) }]), _0x22653b[0x0][_0x2944a7(0x225)], _0x22653b[0x0]['facebook_page_id']); } else { if (startsWithPlan(_0x1e24c3)) await sendFbMessage(_0x5e4075, _0x214dd4(_0x875305), _0x22653b[0x0][_0x2944a7(0x225)], _0x22653b[0x0][_0x2944a7(0x1db)]); else { const _0x56603e = await openAi(_0x1e24c3, _0x5e4075); await sendFbMessageButton(_0x5e4075, _0x56603e + '\x0a\x0a', [{ 'type': _0x2944a7(0x21b), 'title': _0x4b9c98[_0x2944a7(0x22d)], 'url': _0x2b69ae[_0x2944a7(0x1f2)] + _0x2944a7(0x22b) + _0x2b69ae[_0x2944a7(0x21a)] + _0x2944a7(0x1e0) + _0x10719c['id'], 'webview_height_ratio': 'full' }]), _0x22653b[0x0][_0x2944a7(0x225)], _0x22653b[0x0][_0x2944a7(0x1db)], console[_0x2944a7(0x1da)](_0x56603e + '\x0a\x0a' + _0x4b9c98[_0x2944a7(0x22d)] + '\x20' + _0x2b69ae[_0x2944a7(0x1f2)] + _0x2944a7(0x22b) + _0x2b69ae[_0x2944a7(0x21a)] + '/watch?code=' + _0x10719c['id']); } } descreaseLimit(_0x5e4075, 'fb', { 'tele': !![] }), console[_0x2944a7(0x1da)](_0x2944a7(0x243)); } } else { if (!_0x3c4bd7[_0x2944a7(0x23c)] || _0x3c4bd7[_0x2944a7(0x213)] < 0x1) { const _0x287115 = await getFreePlan(); _0x287115 && (await updatePlan(_0x5e4075, _0x287115), console[_0x2944a7(0x1da)]('plan\x20updated\x20for\x20existing\x20fb\x20user'), await sendFbMessage(_0x5e4075, _0x4b9c98[_0x2944a7(0x205)] + '\x0a\x0a' + _0x214dd4(_0x875305), _0x22653b[0x0][_0x2944a7(0x225)], _0x22653b[0x0]['facebook_page_id'])); console[_0x2944a7(0x1da)]('user\x20does\x20not\x20have\x20a\x20plan\x20warding\x20sent\x20already'); return; } console[_0x2944a7(0x1da)](_0x2944a7(0x1fc)), await getPendingAd({ 'mobile': _0x5e4075, 'premium': !![] }); if (_0x4d9a9d(_0x1e24c3) && JSON[_0x2944a7(0x220)](_0x3c4bd7['plan'])?.[_0x2944a7(0x1d3)] === 0x1) { const _0xe72ac4 = await openAiImage(_0x1e24c3['replace'](_0x2944a7(0x1d4), '')); await sendFbMessageImg(_0x5e4075, _0xe72ac4, _0x22653b[0x0]['facebook_api'], _0x22653b[0x0][_0x2944a7(0x1db)]); } else { if (startsWithPlan(_0x1e24c3)) await bot['sendFbMessage'](_0x5e4075, _0x214dd4(_0x875305), _0x22653b[0x0][_0x2944a7(0x225)], _0x22653b[0x0]['facebook_page_id']); else { const _0x31fccb = await openAi(_0x1e24c3, _0x5e4075); await sendFbMessage(_0x5e4075, _0x31fccb, _0x22653b[0x0]['facebook_api'], _0x22653b[0x0][_0x2944a7(0x1db)]); } } await descreaseLimit(_0x5e4075, _0x2944a7(0x234), { 'tele': !![] }), console[_0x2944a7(0x1da)](_0x2944a7(0x231)); } } } } catch (_0xcbf5f6) { _0x35779d[_0x2944a7(0x21c)]({ 'err': _0xcbf5f6 }), console[_0x2944a7(0x1da)](_0xcbf5f6); } }), module[_0x28338a(0x1cf)] = router;